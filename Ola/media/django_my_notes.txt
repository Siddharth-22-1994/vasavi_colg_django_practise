# ! __init__.py --> 
# This represents a normal
# computer folder into a Python Package

------------> asgi and wsgi intro
link --> https://www.youtube.com/watch?v=LtpJup6vcS4

--> asgi and wsgi both are interfaces that are 
used to handle request from python application(clients) 
side and server side.
Both are different only in habdling the request
Example: making tea and omlet eg

---> Num of cores
2x(Number of cores)+1 --> if 6 cores measn 13 workers

wsgi.py --->
Web Server Gateway Interface --> It used to handle request one by one, but it has more number of workers.
So the rqeust are handles easily EG:django, flask

# ! asgi.py -->
# Asynchronous Server Gateway Interface Eg:FastApi
# It is only used in live production environment
# It is Python Interface between asynchronous 
# server and application

----> Settings.py

--> BASE_DIR
BASE_DIR points to the top hierarchy of the project i.e. mysite, whatever paths we define in the project are all relative to BASE_DIR. 

DEBUG
In Development Error is very obvious to occur. There is no fun in writing a program where we do not face any error. but sometimes tackling errors is very hectic. Django provides an inbuilt Debugger which makes the developer’s life very easy. 

When DEBUG set to True 
ALLOWED_HOSTS can be an empty list i.e. ALLOWED_HOSTS=[ ] because by Default it is 127.0.0.1 or localhost

Allowed Hosts
ALLOWED_HOSTS is a list having addresses of all domains which can run your Django Project. 

Apps
Contenttypes --> ContentType is just a model and table in the database that contains 
information about all the other tables/models in your django application.

Middleware
In Django, middleware is a lightweight plugin that processes during request 
and response execution. Middleware is used to perform a 
function in the application. The functions can be a 
security, session, csrf protection, authentication etc...

---> MVT
The MVT (Model View Template) is a software design pattern. It is a collection of three important components Model View and Template. The Model helps to handle database. It is a data access layer which handles the data.

The Template is a presentation layer which handles User Interface part completely. The View is used to execute the business logic and interact with a model to carry data and renders a template.

-----> Templates
----> Template Inheritance
The most powerful – and thus the most complex – part of Django’s template engine is template inheritance. Template inheritance allows you to build a base “skeleton” template that contains all the common elements of your site and defines blocks that child templates can override.


{% block content %}
block is used for overriding specific parts of a template.

In your case, you have a block named content and this is supposed to be overridden by children that inherit from this template.
